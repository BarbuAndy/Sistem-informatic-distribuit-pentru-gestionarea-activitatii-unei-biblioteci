// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication.context;

namespace WebApplication.Migrations
{
    [DbContext(typeof(LibraryDb))]
    partial class LibraryDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication.context.Author", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("WebApplication.context.Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebApplication.context.Borrow", b =>
                {
                    b.Property<string>("BorrowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReaderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BorrowId");

                    b.HasIndex("BookId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("WebApplication.context.Branch", b =>
                {
                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BranchId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("WebApplication.context.Library", b =>
                {
                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("WebApplication.context.Reader", b =>
                {
                    b.Property<string>("ReaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Welcome")
                        .HasColumnType("bit");

                    b.HasKey("ReaderId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("WebApplication.context.Stock", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("BranchId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("WebApplication.context.Book", b =>
                {
                    b.HasOne("WebApplication.context.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebApplication.context.Borrow", b =>
                {
                    b.HasOne("WebApplication.context.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("WebApplication.context.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("WebApplication.context.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId");

                    b.Navigation("Book");

                    b.Navigation("Branch");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("WebApplication.context.Branch", b =>
                {
                    b.HasOne("WebApplication.context.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("WebApplication.context.Reader", b =>
                {
                    b.HasOne("WebApplication.context.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("WebApplication.context.Stock", b =>
                {
                    b.HasOne("WebApplication.context.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });
#pragma warning restore 612, 618
        }
    }
}
